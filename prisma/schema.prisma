generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  confirmPassword String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  accounts        Account[]
  Authenticator   Authenticator[]
  cartItems       CartItems[]
  order           Order[]
  product         Product[]
  sessions        Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Int
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  userId      String
  id          String      @id @default(uuid())
  title       String
  description String
  image       String
  category    String
  subCategory String
  condition   String
  price       String
  sellerName  String  
  stock       Int
  discount    Int?
  rating      Float?
  createdAt   DateTime    @updatedAt
  updatedAt   DateTime    @updatedAt
  cartItems   CartItems[]
  orders      Order[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItems {
  id        String  @id @default(uuid()) 
  userId    String
  productId String
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
